const {
  default: makeWASocket,
  useMultiFileAuthState,
  DisconnectReason
} = require('baileys');
const path = require('path');
const qrcode = require('qrcode');

let isReconnecting = false;
const usuariosEmAtendimento = new Map();

function estaDentroDoHorarioDeAtendimento() {
  const agora = new Date();
  const dia = agora.getDay(); 
  const hora = agora.getHours();
  const minutos = agora.getMinutes();
  const horarioAtual = hora * 60 + minutos;

  if (dia === 1) return horarioAtual >= 12 * 60 && horarioAtual < 19 * 60;
  if (dia >= 2 && dia <= 5) return horarioAtual >= 10 * 60 && horarioAtual < 18 * 60;
  if (dia === 6) return horarioAtual >= 10 * 60 && horarioAtual < 17 * 60 + 30;

  return false; 
} 

async function createWhatsAppClient(instanceId = 'default') {
  const storePath = path.join(__dirname, `auth_info_${instanceId}`);
  const { state, saveCreds } = await useMultiFileAuthState(storePath);

  const client = makeWASocket({
    auth: state,
    printQRInTerminal: false,
  });

  client.ev.on('connection.update', (update) => {
    const { connection, lastDisconnect, qr } = update;

    if (connection === 'close') {
      const shouldReconnect =
        lastDisconnect?.error?.output?.statusCode !== DisconnectReason.loggedOut;

      if (shouldReconnect && !isReconnecting) {
        isReconnecting = true;
        console.log(`üîÑ Reconectando ${instanceId}...`);
        setTimeout(() => {
          createWhatsAppClient(instanceId);
          isReconnecting = false;
        }, 2000);
      } else {
        console.log(`‚ö†Ô∏è Usu√°rio deslogado da ${instanceId}. Escaneie o QR Code.`);
      }
    } else if (connection === 'open') {
      console.log(`‚úÖ Wpp ${instanceId} conectado com sucesso!`);
    }

    if (qr) {
      console.log('Escaneie o QR Code para autentica√ß√£o:');
      qrcode.toString(qr, { type: 'terminal' }, (err, url) => {
        if (err) return console.error('Erro ao gerar o QR Code:', err);
        console.log(url);
      });
    }
  });

  client.ev.on('creds.update', saveCreds);

  client.ev.on('messages.upsert', async ({ messages }) => {
    const msg = messages[0];
    if (!msg.message || msg.key.fromMe) return;
  
    const from = msg.key.remoteJid;
  
    let texto = '';
    if (msg.message?.conversation) texto = msg.message.conversation;
    else if (msg.message?.extendedTextMessage?.text) texto = msg.message.extendedTextMessage.text;
    else if (msg.message?.imageMessage?.caption) texto = msg.message.imageMessage.caption;
    else if (msg.message?.videoMessage?.caption) texto = msg.message.videoMessage.caption;
  
    const textoLimpo = texto.trim().toLowerCase();
    const agora = Date.now();
    const usuario = usuariosEmAtendimento.get(from) || { ativo: false, ultimoContato: 0, tentativasInvalidas: 0 };
    const tempoInativo = agora - usuario.ultimoContato > 30 * 60 * 1000;
  
   usuario.ultimoContato = agora;
    /* if (!estaDentroDoHorarioDeAtendimento() && !usuario.ativo && usuario.tentativasInvalidas < 2) 
      {
      usuario.ativo = true;
      usuario.tentativasInvalidas = 0;
      usuariosEmAtendimento.set(from, usuario);
  
      
    }
  */
    if ((textoLimpo === 'menu' || tempoInativo) && !usuario.ativo) {
      usuario.ativo = true;
      usuario.tentativasInvalidas = 0;
      usuariosEmAtendimento.set(from, usuario);
  
      if (!estaDentroDoHorarioDeAtendimento()) {
        return await client.sendMessage(from, {
          text: `Ol√°! Seja bem-vindo(a) √† Kantine üòä\n\n*No momento n√£o estamos dispon√≠veis.*\n\nüïí *Nossos hor√°rios de atendimento s√£o:*\n\n‚Ä¢ Seg: 12h ‚Äì 19h\n‚Ä¢ Ter a Sex: 10h ‚Äì 18h\n‚Ä¢ S√°b: 10h ‚Äì 17h30\n\nMas deixe sua mensagem, que assim que algu√©m estiver dispon√≠vel, te atendemos! üòä\n\nNos diga o que precisa selecionando um dos n√∫meros abaixo:\n\n*1*  ‚Äì Encomendas de Bolos üç∞\n*2*  ‚Äì Pedidos Delivery ou Retirada üõµ\n*3*  ‚Äì Encomendas de Outros Produtos ü•ê\n\n Assim que algu√©m tiver dispon√≠vel, daremos continuidade ao seu atendimento! üòâ`
        });
      } else {
      return await client.sendMessage(from, {
        text: `Ol√°! Seja bem-vindo(a) √† Kantine! üòä
  
  Nos diga o que precisa selecionando um dos n√∫meros abaixo:
  
  *1*  ‚Äì Encomendas de Bolos üç∞  
  *2*  ‚Äì Pedidos Delivery ou Retirada üõµ  
  *3*  ‚Äì Encomendas de Outros Produtos ü•ê  
  *4*  ‚Äì Falar com um Atendente üí¨  
  
  üïí *Hor√°rios de Funcionamento das Lojas*
  
  üìç *Loja (Vinhedos e Get√∫lio)*  
  ‚Ä¢ Seg: 12h ‚Äì 19h  
  ‚Ä¢ Ter a Sex: 10h ‚Äì 18h  
  ‚Ä¢ S√°b: 10h ‚Äì 17h30  
  
  üì± *WhatsApp e Delivery*  
  ‚Ä¢ Seg: 12h ‚Äì 19h  
  ‚Ä¢ Ter a Sex: 10h ‚Äì 18h  
  ‚Ä¢ S√°b: 10h ‚Äì 17h30`
      });
    
    }}
  
    if (usuario.ativo) {
      if (!estaDentroDoHorarioDeAtendimento()) {
        // N√£o ativa a op√ß√£o 4 fora do hor√°rio
        if (textoLimpo === '4') {
          return await client.sendMessage(from, {
            text: `Ol√°! Estamos fora do hor√°rio de atendimento no momento.\n\n*Hor√°rios de Funcionamento das Lojas*:\n‚Ä¢ Seg: 12h ‚Äì 19h\n‚Ä¢ Ter a Sex: 10h ‚Äì 18h\n‚Ä¢ S√°b: 10h ‚Äì 17h30\n\nNo momento, n√£o podemos transferir para um atendente. Por favor, escolha uma das outras op√ß√µes.`
          });
          
        }
      }
  
      switch (textoLimpo) {
        case '1':
          await client.sendMessage(from, {
            text: `D√™ uma olhadinha em nosso card√°pio: https://drive.google.com/file/d/1YVXaOwr9mdlE0FZJWbgXUjPhWC51tnGw\n\n*Preencha pra mim e j√° j√° venho confirmar seu pedido:*\n\nSeu nome:\nQual bolo voc√™ quer:\nTamanho do Bolo:\nQual data e hor√°rio voc√™ quer retirar:\n\nüì¶ Encomendas devem ser feitas com 48h de anteced√™ncia ‚Äî se for de √∫ltima hora, a gente v√™ com a cozinha se consegue te atender!\n\nPra voltar as op√ß√µes do menu, digite "MENU".`
          });
          usuario.ativo = false; // Desativa ap√≥s resposta v√°lida
          break;
  
        case '2':
          await client.sendMessage(from, {
            text: `Para facilitar o seu pedido de *delivery*, acesse: https://pedido.takeat.app/kantinegastronomia\n\nCaso queira fazer um pedido pra retiradas, √© s√≥ selecionar a op√ß√£o de *retirada* no site.\n\nPra voltar as op√ß√µes do menu, digite "MENU".`
          });
          usuario.ativo = false; // Desativa ap√≥s resposta v√°lida
          break;
  
        case '3':
          await client.sendMessage(from, {
            text: `Me diga qual produto voc√™ gostaria, a data de retirada e a quantidade.\n\nPra voltar as op√ß√µes do menu, digite "MENU".`
          });
          usuario.ativo = false; // Desativa ap√≥s resposta v√°lida
          break;
  
        case '4':
          if (estaDentroDoHorarioDeAtendimento()) {
            await client.sendMessage(from, {
              text: `J√° vou te passar para o atendente! üòä\n\nEnquanto isso, me diga como podemos te ajudar!!\n\nPra voltar as op√ß√µes do menu, digite "MENU".`
            });
            usuario.ativo = false; // Desativa ap√≥s resposta v√°lida
          break;
          } else {
            await client.sendMessage(from, {
              text: `Estamos fora do hor√°rio de atendimento no momento.\n\n*Hor√°rios de Funcionamento das Lojas*:\n‚Ä¢ Seg: 12h ‚Äì 19h\n‚Ä¢ Ter a Sex: 10h ‚Äì 18h\n‚Ä¢ S√°b: 10h ‚Äì 17h30\n\nPor favor, escolha uma das outras op√ß√µes ou volte durante o hor√°rio de atendimento.`
            });
            usuario.ativo = false; // Desativa ap√≥s resposta v√°lida
            break;
          }
          default:
            usuario.tentativasInvalidas = (usuario.tentativasInvalidas || 0) + 1;
          
            if (!estaDentroDoHorarioDeAtendimento()) {
              if (usuario.tentativasInvalidas >= 2) {
                usuario.ativo = false;
                usuariosEmAtendimento.set(from, usuario);
                return await client.sendMessage(from, {
                  text: `Assim que algu√©m estiver dispon√≠vel, daremos continuidade ao seu atendimento. üòä\n\nPra voltar as op√ß√µes do menu, digite "MENU".`
                });
            
              } else {
                usuariosEmAtendimento.set(from, usuario);
                return await client.sendMessage(from, {
                  text: `Por favor, selecione uma das op√ß√µes do menu.`
                });
        
              }
            }
          
            // Dentro do hor√°rio de atendimento
            if (usuario.tentativasInvalidas >= 2) {
              usuario.ativo = false;
              usuariosEmAtendimento.set(from, usuario);
              return await client.sendMessage(from, {
                text: `J√° vou te passar para o atendente! üòä\n\nEnquanto isso, me diga como podemos te ajudar!!\n\nPra voltar as op√ß√µes do menu, digite "MENU".`
              });
            } else {
              usuariosEmAtendimento.set(from, usuario);
              return await client.sendMessage(from, {
                text: `Por favor, selecione uma das op√ß√µes do menu!`
              });
            }
          
      }
  
      if (['1', '2', '3'].includes(textoLimpo)) {
        usuario.ativo = false; // Desativa ap√≥s enviar a resposta para op√ß√µes v√°lidas
        usuario.tentativasInvalidas = 0;
        usuariosEmAtendimento.set(from, usuario);
      }
    }
  });
}
createWhatsAppClient('kantine');
